package can.basic;

import java.io.IOException;
import java.io.OutputStream;
import java.util.TooManyListenersException;

import can.basic.CANConnect.CanSerialWrite;
import gnu.io.SerialPort;

public class CANReadWriteTest {
	SerialConnect serialConnect; // CAN 시리얼 포트 연결
	OutputStream out; // can과 output통신할 스트림

	public CANReadWriteTest(String portName) {
		serialConnect = new SerialConnect();
		serialConnect.connect(portName, this.getClass().getName());

		// input,output 작업을 하기 위해 리스너를 port에 연결
		SerialPort commport = (SerialPort) serialConnect.getCommPort();
		SerialListener listener = new SerialListener(serialConnect.getBis());
		try {
			commport.addEventListener(listener);
			commport.notifyOnDataAvailable(true);
		} catch (TooManyListenersException e) {
			e.printStackTrace();
		}

		// output스트림 얻기
		out = serialConnect.getOut();
		
		//처음 CAN통신을 위한 준비 작업을 할 때는 수신 가능한 메시지를 보낼 수 있도록
		new Thread(new CANWriteThread()).start();

	}//END 생성자
	
	public void send(String msg){
		new Thread(new CANWriteThread(msg)).start();
	}

	class CANWriteThread implements Runnable {
		String data; // CAN으로 내보낼 데이터 - 송신할 데이터를 저장할 변수
		
		CANWriteThread() {  //----처음에 수신 가능 설정하기 위한 생성자
			// 1.CAN통신을 할 수 있는 상태라는 것을 알려주기 - CAN 수신 설정
			// 수신 시작에 관련된 데이터 프레임
			this.data = ":G11A9\r"; // 시작 + 명령코드 + 체크섬 + 끝문자 (통신 프로토콜)
		}
		CANWriteThread(String msg){ // ------ 메시지 보낼 때마다 사용
			this.data = convert_data(msg);
		}
		//msg = msg의 id + 데이터
		public String convert_data(String msg){
			msg = msg.toUpperCase(); //메시지를 대문자로 변환
			msg = "W28"+msg; //송신 데이터의 구분기호를 추가
			//msg W28 00000000 0000000000000000 - id와 데이터를 변환해서 전송
			//데이터프레임에 대한 체크섬을 생성 - 앞 뒤문자 빼고 나머지를 더한 후
			//oxff로 &연산
			char[] data_arr = msg.toCharArray();
			int sum =0;
			for(int i=0;i<data_arr.length;i++){
				//System.out.println(data_arr[i]);
				sum = sum+ data_arr[i];
			}
			sum = (sum & 0xff);
			//보낼 메시지 최종 완성  - 규칙
			String result = ":"+
							msg + Integer.toHexString(sum).toUpperCase()+
							"\r";//체크썸
			return result;
		}
		@Override
		public void run() {
			byte[] outputdata = data.getBytes();
			try {
				out.write(outputdata);
			} catch (IOException e) {
				e.printStackTrace();
			}

		}

	}
	
	public static void main(String[] args) {
		String msg = "00000000"; // 송신할 메시지의 구분 id
		String data = "0000000000000011"; //송신할 데이터 - 뒤에 두개는 어떤 거여도 상관 x
		String msg = id + data;	
		CANReadWriteTest canObj = new CANReadWriteTest("COM6");
		
	}
	
		
	}
