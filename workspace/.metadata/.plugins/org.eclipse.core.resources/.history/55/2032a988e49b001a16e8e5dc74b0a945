package can.basic;


import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;


import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.NoSuchPortException;
import gnu.io.PortInUseException;
import gnu.io.SerialPort;
import gnu.io.SerialPortEventListener;
import gnu.io.UnsupportedCommOperationException;
//시리얼 통신을 담당하는 객체
//데이터가 전송될 때마다 event발생
public class SerialConnect implements SerialPortEventListener{
	InputStream in;
	OutputStream out;
	BufferedInputStream bis;
	public void connect(String portName,String appName) {
	      try {
	         //COM포트가 실제 존재하고 사용 가능한 상태인지 확인
	         CommPortIdentifier commPortIdentifier = CommPortIdentifier.getPortIdentifier(portName);
	         if(commPortIdentifier.isCurrentlyOwned()) {//포트가 사용중인지 체크
	        	 //점유가 되어있으면 사용이 불가능하다.
	            System.out.println("포트 사용할 수 없습니다.");
	         }else {
	            System.out.println("포트 사용가능");
	            //port가 사용 가능하면 포트를 열고 포트객체를 얻어오기
	            //매개변수1 : 포트를 열고 사용하는 프로그램의 이름(문자열)
	            //매개변수2 : 포트를 열고 통신하기 위해서 기다리는 시간(밀리세컨드)
	               CommPort commPort = commPortIdentifier.open(appName,5000);
	               System.out.println(commPort);
	         }
	      } catch (NoSuchPortException e) {
	         e.printStackTrace();
	      } catch (PortInUseException e) {
	         e.printStackTrace();
	      }
	   }
	 public void connect(String portName) {
	      try {
	         //COM포트가 실제 존재하고 사용 가능한 상태인지 확인
	         CommPortIdentifier commPortIdentifier = CommPortIdentifier.getPortIdentifier(portName);
	         if(commPortIdentifier.isCurrentlyOwned()) {//포트가 사용중인지 체크
	            System.out.println("포트 사용할 수 없습니다.");
	         }else {
	            System.out.println("포트 사용가능");
	            //port가 사용 가능하면 포트를 열고 포트객체를 얻어오기
	            //매개변수1 : 포트를 열고 사용하는 프로그램의 이름(문자열)
	            //매개변수2 : 포트를 열고 통신하기 위해서 기다리는 시간(밀리세컨드)
	               CommPort commPort = commPortIdentifier.open("basic_serial",5000);
	               System.out.println(commPort);
	               if(commPort instanceof SerialPort) {
	                  System.out.println("SerialPort");
	                  SerialPort serialPort = (SerialPort)commPort;
	                 
	                  serialPort.setSerialPortParams(921600,
	                                          SerialPort.DATABITS_8,
	                                          SerialPort.STOPBITS_1,
	                                          SerialPort.PARITY_NONE);
	                  in = serialPort.getInputStream();
	                  bis = new BufferedInputStream(in);
	                  out = serialPort.getOutputStream();
	                  //데이터를 주고 받는 작업(쓰레드)을 여기에 호출
	                  //안드로이드에서 입력받은 값을 아두이노로 전송하는 쓰레드
	                 
	                  
	               }else {
	                  System.out.println("SerialPort만 작업할 수 있습니다");
	               }
	         }
	      } catch (NoSuchPortException e) {
	         e.printStackTrace();
	      } catch (PortInUseException e) {
	         e.printStackTrace();
	      } catch (UnsupportedCommOperationException e) {
	         e.printStackTrace();
	      } catch (IOException e) {
	         e.printStackTrace();
	      }
	   }
	   public static void main(String[] args) {
	     // new SerialConnectionTest().connect("COM5");
	   }
}
